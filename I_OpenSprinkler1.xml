<?xml version="1.3"?>
<implementation>
	<functions>

	TASK_HANDLE = nil

	local json = require("dkjson")	

	local MSG_CLASS = "OpenSprinkler"
	local DEBUG_MODE = true

	local function log(text, level)
		luup.log(string.format("%s: %s", MSG_CLASS, text), (level or 50))
	end

	local function debug(text)
		if (DEBUG_MODE == true) then
			log("Debug: " .. text)
		end
	end

	local function findChild(parentDevice, label)
		for k, v in pairs(luup.devices) do
			if (v.device_num_parent == parentDevice and v.id == label) then
						return k
					end
		end

		-- Dump a copy of the Global Module list for debugging purposes.
		log("findChild cannot find parentDevice: " .. tostring(parentDevice) .. " label: " .. label)
		-- for k, v in pairs(luup.devices) do
		--	log("Device Number: " .. k ..
		--	" v.device_type: " .. tostring(v.device_type) ..
		--	" v.device_num_parent: " .. tostring(v.device_num_parent) ..
		--	" v.id: " .. tostring(v.id)
		--	)
		-- end
	end

	function ParseCSVLine (line,sep)
		local res = {}
		local pos = 1
		sep = sep or ','
		while true do
			local c = string.sub(line,pos,pos)
			if (c == "") then break end
			if (c == '"') then
				-- quoted value (ignore separator within)
				local txt = ""
				repeat
					local startp,endp = string.find(line,'^%b""',pos)
					txt = txt..string.sub(line,startp+1,endp-1)
					pos = endp + 1
					c = string.sub(line,pos,pos)
					if (c == '"') then txt = txt..'"' end
					-- check first char AFTER quoted string, if it is another
					-- quoted string without separator, then append it
					-- this is the way to "escape" the quote char in a quote. example:
					--   value1,"blub""blip""boing",value3  will result in blub"blip"boing  for the middle
				until (c ~= '"')
				table.insert(res,txt)
				assert(c == sep or c == "")
				pos = pos + 1
			else
				-- no quotes used, just look for the first separator
				local startp,endp = string.find(line,sep,pos)
				if (startp) then
					table.insert(res,string.sub(line,pos,startp-1))
					pos = endp + 1
				else
					-- no separator found -> use rest of string and terminate
					table.insert(res,string.sub(line,pos))
					break
				end
			end
		end
		return res
	end
	
	local function checkVersion()
		local ui7Check = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1", "UI7Check", lul_device) or ""
		if ui7Check == "" then
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1", "UI7Check", "false", lul_device)
			ui7Check = "false"
		end
		if( luup.version_branch == 1 and luup.version_major == 7 and ui7Check == "false") then
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1", "UI7Check", "true", lul_device)
			luup.attr_set("device_json", "D_OpenSprinkler1_UI7.json", lul_device)
			luup.reload()
		end
	end
	
	function init(lul_device)
		debug("init : Enter : DeviceID: " .. luup.device)
		
		--check UI version
		checkVersion()
		
		-- Check we have an IP address. Without one nothing's going to work
		local ipLen = string.len(luup.devices[luup.device].ip)
		debug("init : IP Length  " .. ipLen)
		
		if (ipLen == 0) then
			if (TASK_HANDLE == nil) then
				TASK_HANDLE = luup.task('Unable to communicate with OpenSprinkler controller.  Check IP Address', 2, 'OpenSprinkler Interface', -1)
			else
				luup.task('Unable to communicate with OpenSprinkler controller.  Check IP Address', 2, 'OpenSprinkler Interface', TASK_HANDLE)
			end
			return false
		else
			if (TASK_HANDLE == nil) then
				TASK_HANDLE = luup.task('', 4, '', -1)
			else
				luup.task('', 4, '', TASK_HANDLE)
			end
		end
		
		local lul_refresh = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","RefreshStatusSec",luup.device)
		if (lul_refresh == nil) then
			lul_refresh = '2'
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1","RefreshStatusSec",lul_refresh,luup.device)
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1","Password","opendoor",luup.device)
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1","Status",0,luup.device)
		end


		-- Lookup the zone id's the user wants to manage
		local lul_ID = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1", "ZoneIds", lul_device)
		if (lul_ID == nil) then
			
			-- Nothing is set, so let's assume two zones to start
			lul_ID = "01,02"
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1", "ZoneIds", lul_ID, lul_device)
		end

		-- Add the zones the user wants to manage in MiCasaVerde
		child_devices = luup.chdev.start(lul_device);

		-- OpenSprinkler has max of 32 devices; allow user to override
		local lul_max_zones = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","MaxZones",luup.device)
		if (lul_max_zones == nil) then
			lul_max_zones = '32'
		end

			
		debug("init : ZoneIds to configure : " .. lul_ID)
		
		local isUI7 = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1", "UI7Check", lul_device) or ""
		if isUI7 == "" then
			luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1", "UI7Check", "false", lul_device)
			isUI7 = "false"
		end
		
		for i = 1,lul_max_zones do
			local s = string.format("%02d", i)
			if (string.find (lul_ID,s) ~= nil) then
				debug("init: Adding zone " .. s)
				if isUI7 == "true" then
					luup.chdev.append(lul_device, child_devices, s, "Zone #" .. s, "", "D_BinarySprinkler1_UI7.xml", "", "", false)
				else	
					luup.chdev.append(lul_device, child_devices, s, "Zone #" .. s, "", "D_BinarySprinkler1.xml", "", "", false)
				end
			end
		end
		luup.chdev.append(lul_device, child_devices, "", "Controller", "", "D_OpenSprinklerC1_UI7.xml", "", "", false)
		luup.chdev.sync(lul_device, child_devices)
	
		-- Enable timer call back as we need to poll for status changes
		debug("init : Poll status every " .. lul_refresh .. ' sec')
		luup.call_timer("poll_status_cycle", 1, "1", "")

		-- Enable a time call back in 15 seconds to update zone names from the controller
		-- The delay is needed as we can set the name attribute during initialization
		luup.call_timer("poll_zone_names", 1,"15s", "")
		if isUI7 == "true" then
			luup.set_failure(0, luup.device)
		end
		-- We're done
		debug("init : Exit")
	end

	function poll_status()
		debug("poll_status : Enter : DeviceID: " .. luup.device)

		local http = require("socket.http")
		http.TIMEOUT = 5
		
		-- Poll OpenSprinkler for master status
		local lul_password = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","Password",luup.device)
		local lul_cmd = 'http://' .. luup.devices[luup.device].ip .. '/jc?pw=' .. lul_password
		local res, status_code = http.request(lul_cmd)

		-- Check we had success
		if ( status_code ~= 200 ) then
			log("OpenSprinkler : poll_status from / query FAILED: Status Code: " .. status_code)
			return false
		end

		debug("poll_status: status_code=" ..status_code .. " res=" .. res)
		local jsonRes = json.decode(res)

		-- Locate the device which represents the controller
		local lul_controller_device = findChild(luup.device, "")
		
		-- Decode status
		if (tonumber(jsonRes.en) == 1) then
			luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status", 1, luup.device)
			luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status", 1, lul_controller_device)
		elseif ( tonumber(jsonRes.en) == 0) then
			luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status", 0, luup.device)
			luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status", 0, lul_controller_device)
		end

		-- Grab rain delay
		luup.variable_set("urn:fowler-cc:serviceId:OpenSprinkler1","RainDelay", jsonRes.rdst, luup.device)
		
		-- Poll OpenSprinkler for zone status
		local lul_password = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","Password",luup.device)
		local lul_cmd = 'http://' .. luup.devices[luup.device].ip .. '/js?pw=' .. lul_password
		debug("poll_status: sending command: " .. lul_cmd)
		local res, status_code = http.request(lul_cmd)
				
		-- Check we had success
		if ( status_code ~= 200 ) then
			log("OpenSprinkler : poll_status from /js query FAILED: Status Code: " .. status_code)
			return false
		else
			debug("poll_status: status_code=" ..status_code .. " res=" .. res)
		end
		
		-- Extract the station status from the returned data
		local sn0Data = json.decode(res)
		if (sn0Data ~= nil) then
			debug("poll_status: Got valid response")
		else
			log("OpenSprinkler : poll_status got unexpected return from  /js query. Exiting")
			return false
		end

		-- Max stations is length of returned data
		local sn0Len = tonumber(sn0Data.nstations)
		debug("poll_status: Max Stations: " .. sn0Len )

		-- Update zone status
		local lul_ID = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1", "ZoneIds", lul_device)

		for i = 1, sn0Len do
			-- Lookup the zone id's the user wants to manage
			local s = string.format("%02d", i)

			-- Check to see if zone is under management
			if (string.find (lul_ID, s) ~= nil) then			
				-- Locate the device which represents the irrigation zone
				local lul_zone_device = findChild(luup.device, s)

				-- Check to see if zone status changed
				local curStatus = luup.variable_get("urn:upnp-org:serviceId:SwitchPower1","Status",lul_zone_device)
				if (tonumber(curStatus) ~= tonumber(sn0Data.sn[i])) then
					debug("poll_status : Update Zone : " .. i .. " Status : " .. sn0Data.sn[i])
					luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status",sn0Data.sn[i],lul_zone_device)
				end
			end
		end

		debug("poll_status : Exit")
	end

	function poll_zone_names()
		debug("poll_zone_names : Enter : DeviceID: " .. luup.device)

		local http = require("socket.http")
		http.TIMEOUT = 5
		
		-- Poll OpenSprinkler for master status - this returns the zone names in an array
		local lul_password = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","Password",luup.device)
		local lul_cmd = 'http://' .. luup.devices[luup.device].ip .. '/jn?pw=' .. lul_password
		local res, status_code = http.request(lul_cmd)
		debug("poll_zone_names: status_code=" ..status_code .. " res=" .. res)

		-- Check we had success
		if ( status_code ~= 200 ) then
		  return false
		end

		-- Get a list of zones we're managing
		local lul_ID = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1", "ZoneIds", lul_device)

		-- Strip the names out into a table
		local jsonRes = json.decode(res)

		-- Iterate through the zone id / name table updating zone names under management
		for zoneId, singleZoneName in ipairs(jsonRes.snames) do
			debug("poll_zone_names : Zone " .. zoneId .. " Name : " .. singleZoneName)
		
			-- Check to see if zone is under management
			local s = string.format("%02d", zoneId)
			if (string.find (lul_ID, s) ~= nil) then			
				-- Locate the device which represents the irrigation zone
				local lul_zone_device = findChild(luup.device, s)

				-- Set the zone name
				luup.attr_set('name', singleZoneName .. " (" .. s .. ")", lul_zone_device)
				debug("poll_zone_names : Set Name for Zone #" .. s .. ": " .. singleZoneName)
			end
		end
		debug("poll_zone_names : Exit")
	end
	
	function poll_status_cycle()
		debug("poll_status_cycle : Enter")
		local lul_refresh = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","RefreshStatusSec",luup.device)
		luup.call_timer("poll_status_cycle", 1, tostring(lul_refresh), "")
		poll_status()
		debug("poll_status_cycle : Exit")
	end
	</functions>
	<incoming>
		<lua>
	  debug("incoming : Received: " .. tostring(lul_data))
		</lua>
	</incoming>
	<startup>init</startup>
	<actionList>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
				local lul_cmd
				local lul_password = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","Password",luup.device)

				if (tonumber(luup.devices[lul_device].id)) then				
					debug("OpenSprinkler : SwitchPower1 : Entry : Zone : " .. luup.devices[lul_device].id)
					
					local http = require("socket.http")
					http.TIMEOUT = 5
					
					local lul_reverse = luup.variable_get("urn:micasaverde-com:serviceId:HaDevice1","ReverseOnOff",lul_device)
					if( lul_settings.newTargetValue=="1" or (lul_settings.newTargetValue=="0" and lul_reverse=="1") ) then
						debug("OpenSprinkler : SwitchPower1 : ManualOn")

						-- Note : Status is set on the next poll
						lul_cmd = 'http://' .. luup.devices[luup.device].ip .. '/cm?sid=' .. (tonumber(luup.devices[lul_device].id) -1) .. string.char(38) .. 't=3600' .. string.char(38) .. 'en=1' .. string.char(38) .. 'pw=' .. lul_password
					else
						debug("OpenSprinkler : SwitchPower1 : ManualOff")

						lul_cmd = 'http://' .. luup.devices[luup.device].ip .. '/cm?sid=' .. (tonumber(luup.devices[lul_device].id) -1) .. string.char(38) .. 'en=0' .. string.char(38) .. 'pw=' .. lul_password
					end
				else
					debug("OpenSprinkler : SwitchPower1 : Entry : NewTargetValue = " .. lul_settings.newTargetValue)
					
					local lul_base_cmd = 'http://' .. luup.devices[luup.device].ip .. '/cv?pw=' .. lul_password .. string.char(38)
					local lul_reverse = luup.variable_get("urn:micasaverde-com:serviceId:HaDevice1","ReverseOnOff",lul_device)
					if( lul_settings.newTargetValue=="1" or (lul_settings.newTargetValue=="0" and lul_reverse=="1") ) then
						lul_cmd = lul_base_cmd .. 'en=1' .. string.char(38)
					else
						lul_cmd = lul_base_cmd .. 'en=0'					
					end
				end			
				-- NOTE: Status is set on the next poll

				debug("OpenSprinkler : SwitchPower1 : Executing http.request : lul_cmd " .. lul_cmd)
				local http = require("socket.http")
				http.TIMEOUT = 5
				local res, status_code = http.request(lul_cmd)
				if (status_code == 401) then
					if (TASK_HANDLE == nil) then
						TASK_HANDLE = luup.task('Unable to control irrigation controller.  Check controller is in Manual Mode and password is valid', 2, 'OpenSprinkler Interface', -1)
					else
						luup.task('Unable to control irrigation controller.  Check controller is in Manual Mode and password is valid', 2, 'OpenSprinkler Interface', TASK_HANDLE)
					end
				elseif (status_code == 200) then
					if (TASK_HANDLE == nil) then
						TASK_HANDLE = luup.task('', 4, '', -1)
					else
						luup.task('', 4, '', TASK_HANDLE)
					end
				else
					log("OpenSprinkler : SwitchPower1 : Got UNEXPECTED Status Code : " .. status_code)
				end

				-- Trigger a poll; this is the only way the Status variable gets updated
				poll_status()

				debug("OpenSprinkler : SwitchPower1 : Exit")
				return 4
			</job>
			<jobname>OpenSprinkler</jobname>
			<icon>OFF</icon>
		</action>		
		<action>	
			<serviceId>urn:fowler-cc:serviceId:OpenSprinkler1</serviceId>
			<name>SetRainDelay</name>
			<job>
				debug("OpenSprinkler : SetRainDelay : Entry : NewRainDelay = " .. (lul_settings.NewRainDelay or ""))

				local rd = lul_settings.NewRainDelay
				if (rd == nil or string.len(rd) == 0) then
					rd = 0
				end
				
				local lul_password = luup.variable_get("urn:fowler-cc:serviceId:OpenSprinkler1","Password",luup.device)
				local lul_cmd = 'http://' .. luup.devices[luup.device].ip .. '/cv?pw=' .. lul_password .. string.char(38) .. "rd=" .. rd

				local http = require("socket.http")
				http.TIMEOUT = 5
				local res, status_code = http.request(lul_cmd)
				debug("SetRainDelay : http.request returned : res : " .. res .. " : status_code " .. status_code)

				if (status_code == 401) then
					if (TASK_HANDLE == nil) then
						TASK_HANDLE = luup.task('Unable to control irrigation controller.  Check password', 2, 'OpenSprinkler Interface', -1)
					else
						luup.task('Unable to control irrigation controller.  Check password', 2, 'OpenSprinkler Interface', TASK_HANDLE)
					end
				elseif (status_code == 200) then
					if (TASK_HANDLE == nil) then
						TASK_HANDLE = luup.task('', 4, '', -1)
					else
						luup.task('', 4, '', TASK_HANDLE)
					end
				else
					if (TASK_HANDLE == nil) then
						TASK_HANDLE = luup.task('Unable to control irrigation controller.  General failure', 2, 'OpenSprinkler Interface', -1)
					else
						luup.task('Unable to control irrigation controller.  General failure', 2, 'OpenSprinkler Interface', TASK_HANDLE)
					end
				end
								
				debug("OpenSprinkler : SetRainDelay : Exit")
				return 4
			</job>
			<jobname>OpenSprinkler</jobname>
			<icon>OFF</icon>
		</action>
	</actionList>
</implementation>
 
